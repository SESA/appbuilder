#!/bin/bash
set -x
export HOME=/root
export LOGNAME=root
export TERM=vt100
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
export ENV="HOME=$HOME LOGNAME=$LOGNAME TERM=$TERM PATH=$PATH"

# setup standard file system view
mount -t proc /proc /proc
mount -t sysfs /sys /sys

# take care of /dev 1) try using devtmpfs and devpts or 2) dev of exiting fs and devpts
if ! mount -t devtmpfs -o mode=0755 udev /dev; then
  # failed to mount devtmpfs
  # so add a few useful things if not already in file system
  echo "W: devtmpfs not available, falling back to tmpfs for /dev"
  [[ -e /dev/console ]] || mknod -m 0600 /dev/console c 5 1
  [[ -e /dev/null ]] || mknod /dev/null c 1 3
  [[ -e /dev/zero ]] || mknod /dev/zero c 1 5
  [[ -e /dev/random ]] || mknod /dev/random c 1 8
  [[ -e /dev/urandom ]] || mknod /dev/urandom c 1 9
fi 

[[ -e /dev/pts ]] || mkdir /dev/pts
mount -t devpts devpts /dev/pts

# Some things don't work properly without /etc/mtab.
ln -sf /proc/mounts /etc/mtab

# For good measure create /run/sshd
[[ -e /run/sshd ]] || mkdir /run/sshd

######  APP RELATED BEHVIOUR

export APP_DIR=/app
export APP_PRERUN=${APP_DIR}/prerun
export APP_POSTRUN=${APP_DIR}/postrun
export APP_RUN=${APP_DIR}/run
export APP_OUT=${APP_DIR}/output
export APP_END=halt

export APP_ARGS=''
export APP_CMDS=''
export APP_DEBUG=''

export APP_MYMAC=''
export APP_MYIP=''
export APP_MYNODE=''
export APP_CTLSERVER=''
export APP_CTLDIR=''
export APP_CTLFILE=''

if [[ ! -e ${APP_DIR} ]]; then
  mkdir -p ${APP_DIR}
fi

# APP PARAMETERS
cmdline=$(cat /proc/cmdline)
# PARSE OUT APP ARGUMENTS
if [[ ${cmdline}  =~ ^.*appArgs=\'(.*)\'.*$ ]]; then
    APP_ARGS="${BASH_REMATCH[1]}"
    APP_ARGS=${APP_ARGS%%\'*}
fi

# Many of these are intended to be used by appfuncs in order to
# standardize behaviour for networked applications.  By default
# however we don't do anything with them in the init.
# You are expected to source funcs.sh and use those functions that
# are written against these variables

# set the MAC that this node should use for its control communication
if [[ ${cmdline}  =~ ^.*appMac=\'(.*)\'.*$ ]]; then
    APP_MYMAC="${BASH_REMATCH[1]}"
    APP_MYMAC=${APP_MYMAC%%\'*}
fi

# set a IP that this node will be used to communicate with
# the control server and known by
if [[ ${cmdline}  =~ ^.*appIp=\'(.*)\'.*$ ]]; then
    APP_MYIP="${BASH_REMATCH[1]}"
    APP_MYIP=${APP_MYIP%%\'*}
fi

# set a unique name for this node so that it can id itself
# to the control server
if [[ ${cmdline}  =~ ^.*appNode=\'(.*)\'.*$ ]]; then
    APP_MYNODE="${BASH_REMATCH[1]}"
    APP_MYNODE=${APP_MYNODE%%\'*}
    PS1="${APP_NODE}> "
fi

# set to specify the control server that is controlling this
# node... used for rendezvous etc.
if [[ ${cmdline}  =~ ^.*appCtlServer=\'(.*)\'.*$ ]]; then
    APP_CTLSERVER="${BASH_REMATCH[1]}"
    APP_CTLSERVER=${APP_CTLSERVER%%\'*}
fi

# set a control directory for this node to deposit and rendezvous in
# if unset it will default to ssh home dir
if [[ ${cmdline}  =~ ^.*appCtlDir=\'(.*)\'.*$ ]]; then
    APP_CTLDIR="${BASH_REMATCH[1]}"
    APP_CTLDIR=${APP_CTLDIR%%\'*}
fi

# if you want to override the name of this nodes control
# file set this otherwise it will be mynode-myip.out
# see appfuncs.sh
if [[ ${cmdline}  =~ ^.*appCtlFile=\'(.*)\'.*$ ]]; then
    APP_CTLFILE="${BASH_REMATCH[1]}"
    APP_CTLFILE=${APP_CTLDIR%%\'*}
fi

# PARSE OUT ANY APP COMMANDS TO RUN FROM COMMAND LINE
if [[ ${cmdline} =~ ^.*appCmds=\'(.*)\'.*$ ]]; then
    APP_CMDS="${BASH_REMATCH[1]}"
    APP_CMDS=${APP_CMDS%%\'*}
fi

# OVERRIDE APP END BEHAVIOUR FROM COMMAND LINE
if [[  ${cmdline} =~ ^.*appEnd=\'(.*)\'.*$ ]]; then
    APP_END="${BASH_REMATCH[1]}"
    APP_END=${APP_END%%\'*}
fi


# SET APP_DEBUG IF IN COMMAND LINE
if [[  ${cmdline} =~ ^.*appDebug.*$ ]]; then
  APP_DEBUG=1
fi


# source appfuncs.sh to allow standard app functions to be available
# Functions are dependent on the APP_xxx variable settings
[[ -e ${APP_DIR}/appfuncs.sh ]] && . ${APP_DIR}/appfuncs.sh 

if [[ ${APP_DEBUG} == 1 ]]; then 
  # stop and start a shell at the console            
  echo "APP_DEBUG:  starting shell ... exit shell to continue init logic"
  env -i $ENV /bin/bash --login --noprofile --norc
fi

if [[ -e ${APP_PRERUN} ]]; then
  # run command within this shell context  
  . ${APP_PRERUN} &>> ${APP_DIR}/app_out
fi

# process any additional commands that we are supposed to here
if [[ -n ${APP_CMDS} ]]
then
    while [[ -n ${APP_CMDS} ]]
    do
      cmd=${APP_CMDS%%:*}
      APP_CMDS=${APP_CMDS#*:}
      eval $cmd &>> ${APP_OUT}
    done 
fi

if [[ -e ${APP_RUN} ]]; then
  # run the app run file
  eval . ${APP_RUN} ${APP_ARGS} >> ${APP_OUT}
fi

if [[ -e ${APP_POSTRUN} ]]; then
  . ${APP_POSTRUN} >> ${APP_OUT}
fi

# Do specified app end logic 
if [[ ${APP_END} == halt ]]; then
   halt -p -f -d  
elif [[ ${APP_END} == reboot ]]; then
   halt --reboot -f -d 
elif [[ ${APP_END} == sshd ]]; then
    # assumes you have installed ssh
    # Note this runs in the background
    # so we will go onto run a shell on
    # console as well.
    # Need to run full path
    /usr/sbin/sshd
fi   

# if we get here then we might as well start a shell :-) 
env -i $ENV /bin/bash --login --noprofile --norc

halt -p -f -d
